import 'dart:io';
import 'human.dart';

void main() {
/*
  ===================================================================================
  ============================= First Dart Programm  ================================
  ===================================================================================
*/
/**
 * The execution of programm start from main function 
 * The Name of file should be Main.dart or we should run programm manualy from terminal
 * print used to print variables(don't forget sign ->$) or string 
 */
// void main (){
//  print("Hello World");
// }
//********************************************************************************************************* */
/*
  ===================================================================================
  =========================== Datatypes and variables  ==============================
  ===================================================================================
*/
/**
 * Data types String,int,double,dynamic,bool
 * String => Delcartion should start with capital letter
 * 
 */
  // String two = 'This Is number Two';
  // var name = 'adham';
  // print('my Name\'s is $name');
  // int one = 1;
  // double three = 3;
  // int result = one + three; // can assign double value inside int
//*********************************************************************************************************
/*
  ===================================================================================
  =============================== Import Statment  ==================================
  ===================================================================================
*/
/**
 * we use import statment to import library or use part of code from external file 
 */
// import 'test.dart';
// import 'dart:io';
//*********************************************************************************************************
/*
  ===================================================================================
  ================================= User Input  =====================================
  ===================================================================================
*/
/**
 * 
 */
  // print("Enter Your Name");
  // String name = stdin
  //     .readLineSync()!; //The output here is string we will use casting to convert it
  // print('HEllo $name');
//*********************************************************************************************************
/*
  ===================================================================================
  =================================== String  =======================================
  ===================================================================================
*/
/**
 * use r to make everything in the string not work
 */
  // String name = r"Adham's\\\ \\\ \\\\t";
  // String name2 = 'Adham\'s \t \n Elganzoury';
  //length give me information
  // print(name.length);
  // print(name.toUpperCase());
/*
  ===================================================================================
  ================================== Casting  =======================================
  ===================================================================================
*/
//   print("Enter The Number1:");
//   int n1 = int.parse(stdin.readLineSync()!);
//   print("Enter The Number2:");
//   String number2 = stdin.readLineSync()!;
//   double n2 = double.parse(number2);
//   double result = n1 + n2;
//   print("THe Sum Of Two Numbers IS : $result");
//*********************************************************************************************************
/*
  ===================================================================================
  ============================= If and if else   ====================================
  ===================================================================================
*/
/**
 * // == ,<,>,>=,<=,!=
 * multiple line not need to use {}
 * multiple statments need to use {}
 */
  // print("Enter Random Number between 1-10");
  // int number = int.parse(stdin.readLineSync()!);
  // if (number == 1) {
  //   print("I guessed Right");
  //   print("I guessed Right");
  //   print("I guessed Right");
  // } else {
  //   print('I gussed wrong');
  // }
  // print('continue coding');

//*********************************************************************************************************
/*
  ===================================================================================
  ================================== Nested IF ======================================
  ===================================================================================
*/
  /**
   * if    else if    else
   */
  // print("Enter Random Number");
  // double number = double.parse(stdin.readLineSync()!);
  // if (number > 100) {
  //   print("number Greater Than 100");
  // } else if (number < 100) {
  //   print('Number Is less than 100');
  // } else {
  //   print("Number is equal to 100");
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Switch case =====================================
  ===================================================================================
*/
  /**
   * Switch statment used when I Know the range of result of value which enter by user
   */
  // print("Enter Your Grade");
  // String grade = stdin.readLineSync()!;
  // switch (grade) {
  //   case 'A':
  //     print("Excellent");
  //     break;
  //   case 'B':
  //     print("Very Good");
  //     break;
  //   case 'c':
  //     print("Fair");
  //     break;
  //   case 'F':
  //     print("Failed");
  //     break;
  //   default:
  //     print("None Vaild Data :)");
  //     break;
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Scope =====================================
  ===================================================================================
*/
  // int number = 100;
  // if (number == 100) {
  //   number = 100;
  //   int numbertwo = 100;
  //   print('number'==100)
  // }
  // else {
  //   numbertwo=200;
  // }
  // numbertwo=200;//give me error
//*********************************************************************************************************
  /*
  ===================================================================================
  ============================== Global Variables ===================================
  ===================================================================================
*/
/**
 * can be seen in every place in the code 
 * put once we create the global variable it will be in the memory
 * until we close the application
 * will consume many resourses
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================ Bool Datatype ====================================
  ===================================================================================
*/
  // int number = 501;
  // bool isGreater = number > 100; //true
  // if (isGreater) {
  //   print("Number Is Greater than 100");
  // } else {
  //   print("Number Is Less Than 100");
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================ Dynamic Datatype ====================================
  ===================================================================================
*/
/**
 * can be change to any other datatype
 * called week datatype
 * complex datatype
 */
  // dynamic name = 'adham';
  // print(name);
  // name = 20;
  // print(name);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================ Dynamic Datatype ====================================
  ===================================================================================
*/
/**
 * var will automatic know the datatype of variable
 */
  // var name = 'adham';
  // var age = 20;
  // print("My name's $name I'm $age year's old");
  // //note that
  // var name2; //if we not initalize a value for it will be like dynamic datatype
  // name2 = 'tharawt';
  // name2 = 5.5;
//*********************************************************************************************************
  /*
  ===================================================================================
  ==================================== List =========================================
  ===================================================================================
*/
/**
 * can store big number of data
 * we can acess list trow index
 */
  // List<String> students = ['adham', 'mohamed', 'ali'];
  // print(students);
  // print(students[0]);
  // print(students[1]);
  // print(students[2]);
//*********************************************************************************************************
  /*
  ===================================================================================
  ==================================== List =========================================
  ===================================================================================
*/
/**
 * will store only unique values nothing else
 * to list will convert set to list
 */
  // Set<String> students = {'mohamed', 'mohamed', 'ali'};
  // List<String> studentlist = students.toList();
  // print(students.toList()[0]);
//*********************************************************************************************************
  /*
  ===================================================================================
  ==================================== Map ==========================================
  ===================================================================================
*/
/**
 * we use it to store two values which realated with each other
 */
  // Map<int, String> students = {199: 'mohamed', 1: 'samy', 2: 'adham'};
  // print(students[199]);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================== For Loop ========================================
  ===================================================================================
*/
  // for (var i = 0; i < 10; i++) {
  //   print("adham Elganzoury");
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= While loop ======================================
  ===================================================================================
*/
  // bool isconnected = true;
  // while (isconnected) {
  //   print("Send Notifications");
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Do While ========================================
  ===================================================================================
*/
/**
 * will be executed at least one time;
 */
  // bool isconnected = false;
  // do {
  //   print("send notifications");
  // } while (isconnected);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================ Null Safety ======================================
  ===================================================================================
*/
/**
 * int number;
 * nullable mean it can have null value
 * this mean inside number will be null
 * we can't use it and if we forget and use it , it will give us exception
 */
  // String? name;
  // name = stdin.readLineSync();
  // print(name);
  // //another way
  // String name2;
  // name2 = stdin.readLineSync()!;
  // print(name2);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Foreach for in loops ========================================
  ===================================================================================
*/
/**
 * we can use for to know the index but 
 * in foreach we can't know the index
 */
  // List<String> names = ["adham", 'mohamed', 'ali'];
  // names.forEach((name) {
  //   print(name);
  // });
  //another solution
  // for (var element in names) {
  //   print(element);
  // }

//*********************************************************************************************************
/*
  ===================================================================================
  ================================= basic function ========================================
  ===================================================================================
*/
/**
 * Dry don't repeat yourself
 * outside main
 * we will call it from main by type function name
 */
  // void mynewfunction() {
  //   print("my name's is adham");
  //   print("I love coding");
  //   print("But I love Teaching");
  // }

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= return statement ========================================
  ===================================================================================
*/
/**
 * we can leave the return dynamic allocate 
 * but the best practise is specify the return type if we know it 
 */
  //  double sumnumbers() {
  //   print("Enter First Number");
  //   double num1 = double.parse(stdin.readLineSync()!);
  //   print("Enter First Number2");
  //   double num2 = double.parse(stdin.readLineSync()!);
  //   var result = num1 + num2;
  //   return result;
  // }

  // var mysum = sumnumbers();
  // print(mysum);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= parameters In Dart ========================================
  ===================================================================================
*/
/**
 * 
 */
  // double sumnumbers(double var1, double var2) {
  //   var result = var1 + var2;
  //   return result;
  // }

  // var mysum = sumnumbers(1, 2);
  // print(mysum);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Optional and named parameter ========================================
  ===================================================================================
*/
/**
 * you want not send all paramters 
 * we can use [] to make paramter optional
 * or we can give it default value
 * optional paramters should be at the end 
 * we can give default value only if paramter is optional
 * we need to make named paramters as it will prevent us from making error
 */
//   printdata(firstname: 'adham', secondname: 'ashraf', age: 12);
//   void printdata({String? firstname, String? secondname, int? age}) {
//   print('first name is $firstname');
//   print('second name is $secondname');
//   print('age is $age');
// }

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= arrow function ========================================
  ===================================================================================
*/
/**
 * arrow function used to execute one statment only 
 */
  // displayname();
  // void displayname() => print('adham');
  //void getname()=>'adham';
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Ternary Operator ========================================
  ===================================================================================
*/
/**
 * short if 
 */
//equvalnt with normal if
  // int? x;
  // int y = 50;
  // if (y > 0)
  //   x = 100;
  // else
  //   y = -100;//review in nonable
  // print(x);

///////////////////////////
  // int x;
  // int y = 50;
  // x = y > 0 ? 100 : -100;
  // print(x);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Object and classes ========================================
  ===================================================================================
*/
/**
 * To Take Object From Class 
 * name of class Nameofobject(you choose)=classname(); 
 */
//   Human adham = Human();
//   adham.haircolor = 'black';
//   adham.hight = 170;
//   adham.weight = 65;
//   print(adham.NumberOfArms);
//   print(adham.haircolor);
//   print(adham.hight);
//   print(adham.weight);
//   Human mohamed = Human();
//   mohamed.haircolor = 'brown';
//   mohamed.hight = 180;
//   mohamed.weight = 75;
//   print(mohamed.NumberOfArms);
//   print(mohamed.haircolor);
//   print(mohamed.hight);
//   print(mohamed.weight);
//   class Human {
//   int NumberOfArms = 2;
//   double? hight;
//   double? weight;
//   String? haircolor;
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= constructor ========================================
  ===================================================================================
*/
/**
 * constructor will be executed at the creation of object
 * constructor with parameters 
 * constructor without parameters
 * This keyword is used to know the difference between paramter of function and attribute of class
 * we can use named paramters here too
 */
  // human mydefault = human(Name: 'adham', age: 22, Education: 'BFCAI');
  // print(mydefault.Education);
  // print(mydefault.Name);
  // print(mydefault.age);
  // class human {
//   String? Name;
//   int? age;
//   String? Education;
//   // human() {
  //   Name = "adham";
  //   age = 22;
  //   Education = "BFCAI";
  // }
  // human({String? Name, int? age, String? Education}) {
  //   this.Name = Name;
  //   this.age = age;
  //   this.Education = Education;
  // }
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Methods in flutter ========================================
  ===================================================================================
*/
/**
 * 
 */
//   human adham = human();
//   adham.dispaly();
//   class human {
//   String? Name = 'adham';
//   int? age;
//   //method
//   void dispaly() {
//     print("I can walk");
//   }
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Encapsulation ========================================
  ===================================================================================
*/
/**
 * use _ to make it private but we can use it at any part of the same file
 * if we import it from another file then we can't use it 
 */
  // import 'human.dart';
  // human adham = human();
  // adham.set_login('adham', '1234');
  // print("your Username is: ");
  // print(adham.returnusername());
  // print("your Password Is: ");
  // print(adham.returnusername());
  //make file called human.dart and import it in the header
  // class human {
  // String? _username;
  // String? _Password;
  // void set_login(String username, String password) {
  //   this._username = username;
  //   this._Password = password;
  // }

  // returnusername() {
  //   return this._username;
  // }

  // returnpassword() {
  //   return this._Password;
  // }
// }

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Setter and getter ========================================
  ===================================================================================
*/
/**
 * set name of attribute () { code for set value}
 * get name of attribue {return attribute value}
 * we cannot use ? with private attribute set , get
 */
//   human adham = human();
//   adham.numberofarms = 2;
//   print(adham.numberofarms);
//   class human {
//   int _numberofarms = 0;
//   double? height;
//   double? weight;
//   String? haircolor;

//   set numberofarms(int numberofarms) {
//     if (numberofarms <= 2) this._numberofarms = numberofarms;
//   }

//   int get numberofarms {
//     return this._numberofarms;
//   }
// }

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Exceptions ========================================
  ===================================================================================
*/
/**
 * problem happen at the runtime 
 */
  // List<int> numbers = [1, 2, 3, 4];
  // try {
  //   // print(numbers[50]);
  //   // print(11 ~/ 2);
  //   // print(1 ~/ 0);
  // } on IntegerDivisionByZeroException {
  //   print('Integer Division By Zero'); //make your message error
  // } catch (ex) {
  //   print(ex);
  // }

  // print('adham');
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Throw exceptions ========================================
  ===================================================================================
*/
/**
 * 
 */
  // else {
  //   Exception exception=Exception('wrong Number not in range  0-2');
  //   throw Exception;
  //another way with anonymous object
  // throw Exception('wrong Number not in range  0-2');
  // }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Anonymous objects ========================================
  ===================================================================================
*/
/**
 * object that has no name as i don't need it 
 */
// class human {
//   String? Name = 'adham';
//   int? age;
//   //method
//   void dispaly() {
//     print("I can walk");
//   }

//   human(String Name, int age) {
//     this.Name = Name;
//     this.age = age;
//     print("Good Bye");
//   }
// }

//   human('adham', 25);
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= inheritance ========================================
  ===================================================================================
*/
/**
 * 
 */
  // lion scar = lion();
  // Dog jack = Dog();
  // scar.eat();
  // jack.eat();
//   class animal {
//   int numberoflibs = 4;
//   void eat() {
//     print('eating');
//   }
// }

// class lion extends animal {
//   void roar() {
//     print('roaring');
//   }
// }

// class Dog extends animal {
//   void park() {
//     print('parking');
//   }
// }

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Override ========================================
  ===================================================================================
*/
/**
 * we cannot write @overide keyword
 */
  // lion scar = lion();
  // Dog jack = Dog();
  // scar.eat();
  // jack.eat();
// class animal {
//   int numberoflibs = 4;
//   void eat() {
//     print('eating');
//   }
// }

// class lion extends animal {
//   @override
//   void eat() {
//     print('Lion Eating');
//   }

//   void roar() {
//     print('roaring');
//   }
// }

// class Dog extends animal {
//   void park() {
//     print('parking');
//   }
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Polymorphism ========================================
  ===================================================================================
*/
/**
 * that mean one class have many other types 
 */

  // programmer adham = programmer();
  // Frontend ahmed = Frontend();
  // List<human> jobs = [adham, ahmed];
  // List<human> jobs2 = [programmer(), Frontend()]; //we can use anonymous object
  // print(jobs[0].x);
  // print(jobs2[0].x);
  // class human {int x = 5;}
  // class programmer extends human {}
  // class Frontend extends human {}

//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Abstract classes ========================================
  ===================================================================================
*/
/**
 * many override problem
 * methods have no implementation 
 * methods have implementation
 * abstract class can't not create object from it
 */
//   lion scar = lion();
//   Dog jack = Dog();
//   scar.eat();
//   jack.eat();
//   abstract class animal {
//   int numberoflibs = 4;
//   void eat();
// }

// class lion extends animal {
//   @override
//   void roar() {
//     print('roaring');
//   }

//   @override
//   void eat() {
//     // TODO: implement eat
//     print("Lion is eating");
//   }
// }
  print('hello world');

// class Dog extends animal {
//   void park() {
//     print('parking');
//   }

//   @override
//   void eat() {
//     print('Dog Is eating');
//   }
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Interfaces ========================================
  ===================================================================================
*/
/**
 * you must do override for everything 
 */
  // lion scar = lion();
  // Dog jack = Dog();
  // scar.eat();
  // jack.eat();
  // abstract class animal {
//   int numberoflibs = 4;
//   void eat();
//   void somemethod() {}
// }

// class lion implements animal {
//   void roar() {
//     print('roaring');
//   }

//   @override
//   void eat() {
//     print("Lion is eating");
//   }

//   @override
//   int numberoflibs = 4;

//   @override
//   void somemethod() {}
// }

// class Dog extends animal {
//   void park() {
//     print('parking');
//   }

//   @override
//   void eat() {
//     print('Dog Is eating');
//   }
// }
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Nested Inheritance ========================================
  ===================================================================================
*/
/**
 * 
 */

// class animal {
//   int numberoflibs = 4;
//   void eat() {
//     print('eating');
//   }
// }

// class lion extends animal {
//   void roar() {
//     print('roaring');
//   }
// }

// class Dog extends animal {
//   void park() {
//     print('parking');
//   }
// }

// class GermanDogs extends Dog {}
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Super constructor ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Named constructor ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Object Class ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Mixins ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= static keyword ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= static keyword part 2 ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Encapsulation part 2 ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Cascade operator ========================================
  ===================================================================================
*/
/**
 * 
 */
//*********************************************************************************************************
  /*
  ===================================================================================
  ================================= Final and Const ========================================
  ===================================================================================
*/
/**
 * 
 */
//**********************************************************************************************************
}
